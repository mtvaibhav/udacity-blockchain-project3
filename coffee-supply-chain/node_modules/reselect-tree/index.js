(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("reselect-tree", [], factory);
	else if(typeof exports === 'object')
		exports["reselect-tree"] = factory();
	else
		root["reselect-tree"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _entries = __webpack_require__(1);

var _entries2 = _interopRequireDefault(_entries);

var _assign = __webpack_require__(2);

var _assign2 = _interopRequireDefault(_assign);

var _keys = __webpack_require__(3);

var _keys2 = _interopRequireDefault(_keys);

exports.createNestedSelector = createNestedSelector;
exports.createLeaf = createLeaf;
exports.createSelectorTree = createSelectorTree;

var _debug = __webpack_require__(4);

var _debug2 = _interopRequireDefault(_debug);

__webpack_require__(5);

var _reselect = __webpack_require__(6);

var _jsonPointer = __webpack_require__(7);

var _jsonPointer2 = _interopRequireDefault(_jsonPointer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)("reselect-tree");

/**
 * Create a single memoized selector for a collection of named sub-selectors.
 * Behaves like `createStructuredSelector` but also allows direct invocation
 * of child selectors.
 *
 * For example:
 *
 *   const shop = createNestedSelector({
 *     items: (state) => state.items,
 *     promos: (state) => state.promos
 *   });
 *
 * Results in three selectors:
 *
 *   shop(state) ==> { items: state.items, promos: state.items }
 *   shop.items(state) => state.items
 *   shop.promos(state) => state.promos
 *
 * Override `rootSelector` to change behavior of top-level (i.e. `shop(state)`
 * in example.)
 *
 * @param {Object} selectors - object description of selector funcs
 * @param {Selector} rootSelector - specify root selector instead of aggregation
 * @return Selector
 */
function createNestedSelector(selectors, rootSelector = null) {
  let selector;

  if (!rootSelector) {
    // unspecified means default to structured aggregation
    selector = (0, _reselect.createStructuredSelector)(selectors);
  } else if (!(rootSelector instanceof Object) || !rootSelector.resultFunc) {
    // rootSelector isn't already a selector, or it's not an object...
    // forward to `createSelector()`
    selector = (0, _reselect.createSelector)(rootSelector);
  } else {
    // otherwise, just use as is
    selector = rootSelector;
  }

  // add properties for child selectors
  (0, _keys2.default)(selectors).forEach(prop => {
    selector[prop] = selectors[prop];
  });

  return selector;
}

class Leaf {
  constructor(deps, selector) {
    this.deps = deps;
    this.selector = selector;
  }

  contextualize(resolve, pointer) {
    let resolved = this.deps.map(dep => {
      if (typeof dep == 'string') {
        if (dep == "") {
          dep = "/";
        }

        const abspath = _resolvePointer(pointer, "..", dep);
        debug("pointer %o", pointer);
        debug("abspath %o", abspath);

        return (...args) => {
          debug("args: %o", args);
          let selector = resolve(abspath);
          debug("resolved selector: %o", selector);
          if (!selector) {
            throw new Error(`Error: Cannot resolve dep ${dep} on ${pointer}`);
          }
          let result = selector.apply(selector, args);
          debug("result: %o", result);
          return result;
        };
      }

      return dep;
    });

    return (0, _reselect.createSelector)(resolved, this.selector);
  }
}

function createLeaf(deps, selector) {
  return new Leaf(deps, selector);
}

class Tree {
  setRoot(root) {
    this.root = root;
  }

  resolve(abspath) {
    var resolved;
    try {
      let parsed = _jsonPointer2.default.parse(abspath);

      let cur = this.root;
      for (let step of parsed) {
        cur = cur[step];
      }

      return cur;
    } catch (e) {
      debug("failed, root: %O", this.root);
      throw e;
    }

    return resolved;
  }
}

function createSelectorTree(root) {
  let tree = new Tree();

  let selector = _createNode(root, tree.resolve.bind(tree), "");

  tree.setRoot(selector);

  return selector;
}

/**
 * Recursively create a selector node in the tree, applying context to nodes
 * as needed.
 */
function _createNode(node, resolve, pointer = "") {
  //based on type of node, operate differently
  if (node instanceof Function) {
    // plain functions are converted to contextualized Leaf nodes
    return createLeaf([state => state], node).contextualize(resolve, pointer);
  } else if (node instanceof Leaf) {
    // explicit leaf nodes just need context resolution for relative deps
    return node.contextualize(resolve, pointer);
  } else if (node instanceof Object) {
    // otherwise, node is an object, so recurse
    const recurse = (key, child) => _createNode(child, resolve, `${pointer}/${key}`);

    let selectors = (0, _assign2.default)({}, ...(0, _entries2.default)(node).map(([key, child]) => ({ [key]: recurse(key, child) })));

    // special-case `_` child nodes override root selector
    const rootSelector = selectors._ || null;

    return createNestedSelector(selectors, rootSelector);
  } else {
    // other types are not allowed
    throw new Error(`Invalid node in selector tree at ${pointer}. ` + `Must be function, leaf, or object. Received: ${node}`);
  }
}

/**
 * Behaves like path.posix.resolve(), ensuring the returned string is a
 * /-separated string with no ".." or ".".
 *
 * Later absolute entries in `paths` (i.e., items that start with `/`)
 * supercede previous entries.
 */
function _resolvePointer(...paths) {
  return paths
  // reduce to /-separated string, ignoring anything before the last-
  // specified absolute path (e.g. ["/a", "/b", "./c"] becomes "/b/./c")
  .reduce((joined, next) => {
    // next child is absolute; discard previous
    if (next.startsWith("/")) {
      return next;
    }

    return `${joined}/${next}`;
  }, "")

  // now, remove .. and .
  .split("/").reduce((resolved, next) => {
    switch (next) {
      case "..":
        return resolved.slice(0, -1);
      case ".":
        return resolved;
      default:
        return resolved.concat(next);
    }
  }, []).join("/");
}

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/entries");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/assign");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("babel-runtime/core-js/object/keys");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("debug");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("source-map-support/register");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("json-pointer");

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,